while_exp:
    	beqz $t0, done_exp # base, terminating condition
    	li $t1 0 # counter for while_get_power2
    	addi $t5 $t0 -1
    	li $t3 1 # used for done_get_power2
    	bgtz $s0 shift_left_exp
    	
    	while_get_power2: # get the exponent value of 2 ^ n (n being the position of a '1' in the 8-bit exponent)
    	li $t4 2 # 2 to multiply by
    	beq $t1 $t5 done_get_power2
    	mult $t3 $t4 
    	mflo $t3 # $t3 = $t3 * 2
    	addi $t1 $t1 1
    	j while_get_power2
    	
    	done_get_power2:
    	add $t2 $t2 $t3 # add the sum from getting 2 ^ n (n is position of '1')
    	
    	shift_left_exp:
    	addi $t0 $t0 -1
    	sll $s0 $s0 1
    	j while_exp